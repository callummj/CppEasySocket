//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Client.sm
//

#ifndef CLIENT_SM_H
#define CLIENT_SM_H


#define SMC_USES_IOSTREAMS

#include "statemap.h"

// Forward declarations.
class ClientMap;
class ClientMap_Disconnected;
class ClientMap_Connecting;
class ClientMap_Connected;
class ClientMap_Disconnecting;
class ClientMap_Disposed;
class ClientMap_Default;
class ClientState;
class ClientContext;
class Client;

class ClientState :
    public statemap::State
{
public:

    ClientState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(ClientContext&) {};
    virtual void Exit(ClientContext&) {};

    virtual void Connect(ClientContext& context);
    virtual void ConnectionSuccessful(ClientContext& context);
    virtual void ConnectionUnsuccessful(ClientContext& context);
    virtual void Disconnect(ClientContext& context);
    virtual void DisconnectionSuccessful(ClientContext& context);
    virtual void DisconnectionUnsuccessful(ClientContext& context);
    virtual void Dispose(ClientContext& context);

protected:

    virtual void Default(ClientContext& context);
};

class ClientMap
{
public:

    static ClientMap_Disconnected Disconnected;
    static ClientMap_Connecting Connecting;
    static ClientMap_Connected Connected;
    static ClientMap_Disconnecting Disconnecting;
    static ClientMap_Disposed Disposed;
};

class ClientMap_Default :
    public ClientState
{
public:

    ClientMap_Default(const char * const name, const int stateId)
    : ClientState(name, stateId)
    {};

};

class ClientMap_Disconnected :
    public ClientMap_Default
{
public:
    ClientMap_Disconnected(const char * const name, const int stateId)
    : ClientMap_Default(name, stateId)
    {};

    virtual void Connect(ClientContext& context);
    virtual void Dispose(ClientContext& context);
};

class ClientMap_Connecting :
    public ClientMap_Default
{
public:
    ClientMap_Connecting(const char * const name, const int stateId)
    : ClientMap_Default(name, stateId)
    {};

    virtual void ConnectionSuccessful(ClientContext& context);
    virtual void ConnectionUnsuccessful(ClientContext& context);
};

class ClientMap_Connected :
    public ClientMap_Default
{
public:
    ClientMap_Connected(const char * const name, const int stateId)
    : ClientMap_Default(name, stateId)
    {};

    virtual void Disconnect(ClientContext& context);
};

class ClientMap_Disconnecting :
    public ClientMap_Default
{
public:
    ClientMap_Disconnecting(const char * const name, const int stateId)
    : ClientMap_Default(name, stateId)
    {};

    virtual void DisconnectionSuccessful(ClientContext& context);
    virtual void DisconnectionUnsuccessful(ClientContext& context);
};

class ClientMap_Disposed :
    public ClientMap_Default
{
public:
    ClientMap_Disposed(const char * const name, const int stateId)
    : ClientMap_Default(name, stateId)
    {};

};

class ClientContext :
    public statemap::FSMContext
{
public:

    explicit ClientContext(Client& owner)
    : FSMContext(ClientMap::Disconnected),
      _owner(owner)
    {};

    ClientContext(Client& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline Client& getOwner()
    {
        return (_owner);
    };

    inline ClientState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<ClientState&>(*_state);
    };

    inline void Connect()
    {
        getState().Connect(*this);
    };

    inline void ConnectionSuccessful()
    {
        getState().ConnectionSuccessful(*this);
    };

    inline void ConnectionUnsuccessful()
    {
        getState().ConnectionUnsuccessful(*this);
    };

    inline void Disconnect()
    {
        getState().Disconnect(*this);
    };

    inline void DisconnectionSuccessful()
    {
        getState().DisconnectionSuccessful(*this);
    };

    inline void DisconnectionUnsuccessful()
    {
        getState().DisconnectionUnsuccessful(*this);
    };

    inline void Dispose()
    {
        getState().Dispose(*this);
    };

private:
    Client& _owner;
};


#endif // CLIENT_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
